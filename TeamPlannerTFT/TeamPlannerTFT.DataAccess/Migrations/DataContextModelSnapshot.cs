// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TeamPlannerTFT.DataAccess;

namespace TeamPlannerTFT.DataAccess.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TeamPlannerTFT.DataAccess.Model.Trait", b =>
                {
                    b.Property<int>("TraitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TraitEffect")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TraitName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TraitId");

                    b.ToTable("Traits");

                    b.HasData(
                        new
                        {
                            TraitId = 1,
                            TraitEffect = "Certain allies are cloaked in shadows, gaining 50 Armor, 50 Magic Resist and 20% Omnivamp (healing for a percentage of all damage dealt.)",
                            TraitName = "Syndicate"
                        },
                        new
                        {
                            TraitId = 2,
                            TraitEffect = "Bodyguards have increased Armor. Shortly after combat begins, Bodyguards gain a shield and taunt adjacent enemies, forcing them to attack the Bodyguard.",
                            TraitName = "Bodyguard"
                        });
                });

            modelBuilder.Entity("TeamPlannerTFT.DataAccess.Model.Unit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Cost")
                        .HasColumnType("int");

                    b.Property<int>("Mana")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UnitImage")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Units");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Cost = 2,
                            Mana = 0,
                            Name = "Blitzcrank"
                        },
                        new
                        {
                            Id = 2,
                            Cost = 4,
                            Mana = 0,
                            Name = "Braum"
                        },
                        new
                        {
                            Id = 3,
                            Cost = 1,
                            Mana = 0,
                            Name = "Darius"
                        },
                        new
                        {
                            Id = 4,
                            Cost = 5,
                            Mana = 0,
                            Name = "Galio"
                        },
                        new
                        {
                            Id = 5,
                            Cost = 3,
                            Mana = 0,
                            Name = "Leona"
                        },
                        new
                        {
                            Id = 6,
                            Cost = 1,
                            Mana = 0,
                            Name = "Poppy"
                        },
                        new
                        {
                            Id = 7,
                            Cost = 4,
                            Mana = 0,
                            Name = "Ahri"
                        },
                        new
                        {
                            Id = 8,
                            Cost = 2,
                            Mana = 0,
                            Name = "Ashe"
                        },
                        new
                        {
                            Id = 9,
                            Cost = 3,
                            Mana = 0,
                            Name = "Morgana"
                        },
                        new
                        {
                            Id = 10,
                            Cost = 2,
                            Mana = 0,
                            Name = "Zyra"
                        });
                });

            modelBuilder.Entity("UnitTrait", b =>
                {
                    b.Property<int>("UnitsId")
                        .HasColumnType("int");

                    b.Property<int>("TraitsTraitId")
                        .HasColumnType("int");

                    b.HasKey("UnitsId", "TraitsTraitId");

                    b.HasIndex("TraitsTraitId");

                    b.ToTable("UnitTrait");

                    b.HasData(
                        new
                        {
                            UnitsId = 1,
                            TraitsTraitId = 2
                        },
                        new
                        {
                            UnitsId = 2,
                            TraitsTraitId = 1
                        },
                        new
                        {
                            UnitsId = 2,
                            TraitsTraitId = 2
                        },
                        new
                        {
                            UnitsId = 3,
                            TraitsTraitId = 1
                        },
                        new
                        {
                            UnitsId = 3,
                            TraitsTraitId = 2
                        },
                        new
                        {
                            UnitsId = 4,
                            TraitsTraitId = 2
                        },
                        new
                        {
                            UnitsId = 5,
                            TraitsTraitId = 2
                        },
                        new
                        {
                            UnitsId = 6,
                            TraitsTraitId = 2
                        },
                        new
                        {
                            UnitsId = 7,
                            TraitsTraitId = 1
                        },
                        new
                        {
                            UnitsId = 8,
                            TraitsTraitId = 1
                        },
                        new
                        {
                            UnitsId = 9,
                            TraitsTraitId = 1
                        },
                        new
                        {
                            UnitsId = 10,
                            TraitsTraitId = 1
                        });
                });

            modelBuilder.Entity("UnitTrait", b =>
                {
                    b.HasOne("TeamPlannerTFT.DataAccess.Model.Trait", null)
                        .WithMany()
                        .HasForeignKey("TraitsTraitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeamPlannerTFT.DataAccess.Model.Unit", null)
                        .WithMany()
                        .HasForeignKey("UnitsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
